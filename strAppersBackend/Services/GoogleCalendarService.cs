using Google.Apis.Auth.OAuth2;
using Google.Apis.Calendar.v3;
using Google.Apis.Calendar.v3.Data;
using Google.Apis.Services;
using Microsoft.Extensions.Options;
using strAppersBackend.Models;

namespace strAppersBackend.Services;

public interface IGoogleCalendarService
{
    Task<GoogleMeetingResponse> CreateMeetingAsync(CreateGoogleMeetingRequest request);
    Task<bool> SendCalendarInviteAsync(string attendeeEmail, string meetingId, string meetingTitle, DateTime startTime, DateTime endTime, string meetingLink);
}

public class GoogleCalendarService : IGoogleCalendarService
{
    private readonly GoogleWorkspaceConfig _config;
    private readonly ILogger<GoogleCalendarService> _logger;
    private readonly CalendarService _calendarService;

    public GoogleCalendarService(IOptions<GoogleWorkspaceConfig> config, ILogger<GoogleCalendarService> logger)
    {
        _config = config.Value;
        _logger = logger;
        _calendarService = InitializeCalendarService();
    }

    private CalendarService InitializeCalendarService()
    {
        try
        {
            var credential = GoogleCredential.FromFile(_config.ServiceAccountKeyPath)
                .CreateScoped(_config.Scopes.ToArray());

            return new CalendarService(new BaseClientService.Initializer()
            {
                HttpClientInitializer = credential,
                ApplicationName = "StrAppers Backend"
            });
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Failed to initialize Google Calendar service: {Message}", ex.Message);
            throw;
        }
    }

    public async Task<GoogleMeetingResponse> CreateMeetingAsync(CreateGoogleMeetingRequest request)
    {
        try
        {
            _logger.LogInformation("Creating Google Calendar meeting: {Title} at {StartTime}", 
                request.Title, request.StartTime);

            var startDateTime = request.StartTime;
            var endDateTime = request.EndTime;

            var eventDetails = new Event
            {
                Summary = request.Title,
                Description = request.Description,
                Start = new EventDateTime
                {
                    DateTimeDateTimeOffset = startDateTime,
                    TimeZone = "UTC"
                },
                End = new EventDateTime
                {
                    DateTimeDateTimeOffset = endDateTime,
                    TimeZone = "UTC"
                },
                ConferenceData = new ConferenceData
                {
                    CreateRequest = new CreateConferenceRequest
                    {
                        RequestId = Guid.NewGuid().ToString(),
                        ConferenceSolutionKey = new ConferenceSolutionKey
                        {
                            Type = "hangoutsMeet"
                        }
                    }
                }
                // Note: Removed Attendees to avoid domain delegation requirement
                // We'll handle email sending separately through Gmail API
            };

            var createdEvent = await _calendarService.Events.Insert(eventDetails, "primary").ExecuteAsync();

            // Get the meeting link from the conference data
            var meetingLink = createdEvent.ConferenceData?.EntryPoints?.FirstOrDefault()?.Uri;
            
            // If no meeting link was generated, try to get it from the event's conference data
            if (string.IsNullOrEmpty(meetingLink))
            {
                _logger.LogWarning("No meeting link generated initially, attempting to retrieve from event details");
                
                // Try to get the event again to see if the conference data was populated
                var retrievedEvent = await _calendarService.Events.Get("primary", createdEvent.Id).ExecuteAsync();
                meetingLink = retrievedEvent.ConferenceData?.EntryPoints?.FirstOrDefault()?.Uri;
            }
            
            // If still no meeting link, create a direct Google Meet link
            if (string.IsNullOrEmpty(meetingLink))
            {
                _logger.LogWarning("No meeting link generated by Calendar API, creating direct Google Meet link");
                // Generate a direct Google Meet link
                meetingLink = $"https://meet.google.com/{GenerateMeetCode()}";
            }
            
            _logger.LogInformation("Meeting link generated: {MeetingLink}", meetingLink ?? "None");

            _logger.LogInformation("Google Calendar meeting created successfully: {EventId}", createdEvent.Id);

            return new GoogleMeetingResponse
            {
                Success = true,
                MeetingId = createdEvent.Id,
                MeetingTitle = createdEvent.Summary,
                StartTime = startDateTime,
                EndTime = endDateTime,
                DurationMinutes = (int)(endDateTime - startDateTime).TotalMinutes,
                AttendeeCount = request.Attendees.Count,
                JoinUrl = meetingLink,
                Attendees = request.Attendees,
                Details = createdEvent.Description
            };
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error creating Google Calendar meeting: {Message}", ex.Message);
            return new GoogleMeetingResponse
            {
                Success = false,
                Message = ex.Message
            };
        }
    }

    public async Task<bool> SendCalendarInviteAsync(string attendeeEmail, string meetingId, string meetingTitle, DateTime startTime, DateTime endTime, string meetingLink)
    {
        try
        {
            _logger.LogInformation("Calendar invite functionality disabled - using email notifications instead for {Email} and meeting {MeetingId}", attendeeEmail, meetingId);

            // Note: Calendar invites require domain-wide delegation
            // We use Gmail API to send meeting details instead
            return true;
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error with calendar invite for {Email}: {Message}", attendeeEmail, ex.Message);
            return false;
        }
    }

    private string GenerateMeetCode()
    {
        // Generate a random string for Google Meet (similar to how Google Meet generates codes)
        const string chars = "abcdefghijklmnopqrstuvwxyz";
        var random = new Random();
        var meetCode = new string(Enumerable.Repeat(chars, 10)
            .Select(s => s[random.Next(s.Length)]).ToArray());
        
        // Format as Google Meet code (3-4-3 pattern)
        return $"{meetCode.Substring(0, 3)}-{meetCode.Substring(3, 4)}-{meetCode.Substring(7, 3)}";
    }
}

public class CreateGoogleMeetingRequest
{
    public string Title { get; set; } = string.Empty;
    public string Description { get; set; } = string.Empty;
    public DateTime StartTime { get; set; }
    public DateTime EndTime { get; set; }
    public List<string> Attendees { get; set; } = new List<string>();
}

public class GoogleMeetingResponse
{
    public bool Success { get; set; }
    public string Message { get; set; } = string.Empty;
    public string? MeetingId { get; set; }
    public string? MeetingTitle { get; set; }
    public DateTime? StartTime { get; set; }
    public DateTime? EndTime { get; set; }
    public int DurationMinutes { get; set; }
    public int AttendeeCount { get; set; }
    public string? JoinUrl { get; set; }
    public List<string>? Attendees { get; set; }
    public string? Details { get; set; }
}
