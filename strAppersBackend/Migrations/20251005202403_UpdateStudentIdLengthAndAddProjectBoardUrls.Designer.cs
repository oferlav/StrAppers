// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using strAppersBackend.Data;

#nullable disable

namespace strAppersBackend.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20251005202403_UpdateStudentIdLengthAndAddProjectBoardUrls")]
    partial class UpdateStudentIdLengthAndAddProjectBoardUrls
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("strAppersBackend.Models.DesignVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("DesignDocument")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("DesignDocumentPdf")
                        .HasColumnType("bytea");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int>("ProjectId")
                        .HasColumnType("integer");

                    b.Property<int>("VersionNumber")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("IsActive");

                    b.HasIndex("ProjectId");

                    b.HasIndex("VersionNumber");

                    b.ToTable("DesignVersions");
                });

            modelBuilder.Entity("strAppersBackend.Models.JoinRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Added")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("AddedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ChannelId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ChannelName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ErrorMessage")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime>("JoinDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("integer");

                    b.Property<string>("ProjectTitle")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("StudentEmail")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("StudentFirstName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("StudentId")
                        .HasColumnType("integer");

                    b.Property<string>("StudentLastName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("Added");

                    b.HasIndex("ChannelId");

                    b.HasIndex("JoinDate");

                    b.HasIndex("ProjectId");

                    b.HasIndex("StudentEmail");

                    b.HasIndex("StudentId");

                    b.ToTable("JoinRequests");
                });

            modelBuilder.Entity("strAppersBackend.Models.Major", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Department")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Majors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 8, 6, 20, 24, 1, 424, DateTimeKind.Utc).AddTicks(5782),
                            Department = "Computer Science",
                            Description = "Study of computational systems and design",
                            IsActive = true,
                            Name = "Computer Science"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 8, 6, 20, 24, 1, 424, DateTimeKind.Utc).AddTicks(5796),
                            Department = "Computer Science",
                            Description = "Engineering approach to software development",
                            IsActive = true,
                            Name = "Software Engineering"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 8, 6, 20, 24, 1, 424, DateTimeKind.Utc).AddTicks(5798),
                            Department = "Computer Science",
                            Description = "Extracting insights from data",
                            IsActive = true,
                            Name = "Data Science"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 8, 6, 20, 24, 1, 424, DateTimeKind.Utc).AddTicks(5801),
                            Department = "Computer Science",
                            Description = "Protecting digital systems and data",
                            IsActive = true,
                            Name = "Cybersecurity"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2025, 8, 6, 20, 24, 1, 424, DateTimeKind.Utc).AddTicks(5803),
                            Department = "Information Systems",
                            Description = "Management and use of technology",
                            IsActive = true,
                            Name = "Information Technology"
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2025, 8, 6, 20, 24, 1, 424, DateTimeKind.Utc).AddTicks(5806),
                            Department = "Business",
                            Description = "General business management",
                            IsActive = true,
                            Name = "Business Administration"
                        });
                });

            modelBuilder.Entity("strAppersBackend.Models.Organization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("ContactEmail")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Website")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Organizations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "123 Tech Street, Tech City",
                            ContactEmail = "info@techuniversity.edu",
                            CreatedAt = new DateTime(2025, 8, 6, 20, 24, 1, 424, DateTimeKind.Utc).AddTicks(8878),
                            Description = "Leading technology university",
                            IsActive = true,
                            Name = "Tech University",
                            Phone = "555-0101",
                            Type = "University",
                            Website = "https://techuniversity.edu"
                        },
                        new
                        {
                            Id = 2,
                            Address = "456 Innovation Ave, Tech City",
                            ContactEmail = "contact@innovationlabs.com",
                            CreatedAt = new DateTime(2025, 8, 11, 20, 24, 1, 424, DateTimeKind.Utc).AddTicks(8886),
                            Description = "Research and development company",
                            IsActive = true,
                            Name = "Innovation Labs",
                            Phone = "555-0102",
                            Type = "Company",
                            Website = "https://innovationlabs.com"
                        },
                        new
                        {
                            Id = 3,
                            Address = "789 Good Street, Tech City",
                            ContactEmail = "hello@codeforgood.org",
                            CreatedAt = new DateTime(2025, 8, 16, 20, 24, 1, 424, DateTimeKind.Utc).AddTicks(8890),
                            Description = "Non-profit organization promoting tech for social good",
                            IsActive = true,
                            Name = "Code for Good",
                            Phone = "555-0103",
                            Type = "Non-profit",
                            Website = "https://codeforgood.org"
                        });
                });

            modelBuilder.Entity("strAppersBackend.Models.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("ExtendedDescription")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsAvailable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("isAvailable");

                    b.Property<int?>("OrganizationId")
                        .HasColumnType("integer");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("SystemDesign")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("SystemDesignDoc")
                        .HasColumnType("bytea");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Projects");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 9, 5, 20, 24, 1, 430, DateTimeKind.Utc).AddTicks(3852),
                            Description = "Web application for managing student records and academic progress",
                            IsAvailable = true,
                            OrganizationId = 1,
                            Priority = "High",
                            Title = "Student Management System"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 9, 15, 20, 24, 1, 430, DateTimeKind.Utc).AddTicks(3860),
                            Description = "Machine learning platform for academic research",
                            IsAvailable = true,
                            OrganizationId = 2,
                            Priority = "Medium",
                            Title = "AI Research Platform"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 7, 7, 20, 24, 1, 430, DateTimeKind.Utc).AddTicks(3863),
                            Description = "Mobile app connecting volunteers with local community needs",
                            IsAvailable = true,
                            OrganizationId = 3,
                            Priority = "High",
                            Title = "Community Outreach App"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 9, 20, 20, 24, 1, 430, DateTimeKind.Utc).AddTicks(3866),
                            Description = "E-learning platform with video streaming and assessments",
                            IsAvailable = true,
                            OrganizationId = 1,
                            Priority = "Critical",
                            Title = "Online Learning Platform"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2025, 9, 25, 20, 24, 1, 430, DateTimeKind.Utc).AddTicks(3868),
                            Description = "Real-time dashboard for analyzing student performance metrics",
                            IsAvailable = true,
                            OrganizationId = 1,
                            Priority = "Medium",
                            Title = "Data Analytics Dashboard"
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2025, 9, 30, 20, 24, 1, 430, DateTimeKind.Utc).AddTicks(3871),
                            Description = "Mobile application for students to discover and register for campus events",
                            IsAvailable = true,
                            OrganizationId = 1,
                            Priority = "Medium",
                            Title = "Mobile App for Campus Events"
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2025, 10, 2, 20, 24, 1, 430, DateTimeKind.Utc).AddTicks(3874),
                            Description = "VR environment for immersive learning experiences",
                            IsAvailable = true,
                            OrganizationId = 2,
                            Priority = "High",
                            Title = "Virtual Reality Learning Lab"
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2025, 10, 4, 20, 24, 1, 430, DateTimeKind.Utc).AddTicks(3876),
                            Description = "Secure voting system using blockchain technology",
                            IsAvailable = true,
                            OrganizationId = 1,
                            Priority = "High",
                            Title = "Blockchain Voting System"
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2025, 10, 3, 20, 24, 1, 430, DateTimeKind.Utc).AddTicks(3878),
                            Description = "Internet of Things system for campus management",
                            IsAvailable = true,
                            OrganizationId = 2,
                            Priority = "Medium",
                            Title = "IoT Smart Campus"
                        });
                });

            modelBuilder.Entity("strAppersBackend.Models.ProjectBoard", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("BoardId");

                    b.Property<int?>("AdminId")
                        .HasColumnType("integer")
                        .HasColumnName("AdminId");

                    b.Property<string>("BoardUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("BoardURL");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedAt")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DueDate");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("EndDate");

                    b.Property<string>("MovieUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("MovieUrl");

                    b.Property<int>("ProjectId")
                        .HasColumnType("integer")
                        .HasColumnName("ProjectId");

                    b.Property<string>("PublishUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("PublishUrl");

                    b.Property<string>("SprintPlan")
                        .HasColumnType("jsonb");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("StartDate");

                    b.Property<int?>("StatusId")
                        .HasColumnType("integer")
                        .HasColumnName("StatusId");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedAt")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("ProjectId");

                    b.HasIndex("StatusId");

                    b.ToTable("ProjectBoards");
                });

            modelBuilder.Entity("strAppersBackend.Models.ProjectStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Color")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("ProjectStatuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Color = "#10B981",
                            CreatedAt = new DateTime(2025, 8, 26, 20, 24, 1, 425, DateTimeKind.Utc).AddTicks(185),
                            Description = "Newly created project",
                            IsActive = true,
                            Name = "New",
                            SortOrder = 1
                        },
                        new
                        {
                            Id = 2,
                            Color = "#3B82F6",
                            CreatedAt = new DateTime(2025, 8, 26, 20, 24, 1, 425, DateTimeKind.Utc).AddTicks(190),
                            Description = "Project in planning phase",
                            IsActive = true,
                            Name = "Planning",
                            SortOrder = 2
                        },
                        new
                        {
                            Id = 3,
                            Color = "#F59E0B",
                            CreatedAt = new DateTime(2025, 8, 26, 20, 24, 1, 425, DateTimeKind.Utc).AddTicks(193),
                            Description = "Project currently being worked on",
                            IsActive = true,
                            Name = "In Progress",
                            SortOrder = 3
                        },
                        new
                        {
                            Id = 4,
                            Color = "#EF4444",
                            CreatedAt = new DateTime(2025, 8, 26, 20, 24, 1, 425, DateTimeKind.Utc).AddTicks(195),
                            Description = "Project temporarily paused",
                            IsActive = true,
                            Name = "On Hold",
                            SortOrder = 4
                        },
                        new
                        {
                            Id = 5,
                            Color = "#059669",
                            CreatedAt = new DateTime(2025, 8, 26, 20, 24, 1, 425, DateTimeKind.Utc).AddTicks(197),
                            Description = "Project successfully completed",
                            IsActive = true,
                            Name = "Completed",
                            SortOrder = 5
                        },
                        new
                        {
                            Id = 6,
                            Color = "#6B7280",
                            CreatedAt = new DateTime(2025, 8, 26, 20, 24, 1, 425, DateTimeKind.Utc).AddTicks(200),
                            Description = "Project cancelled or abandoned",
                            IsActive = true,
                            Name = "Cancelled",
                            SortOrder = 6
                        });
                });

            modelBuilder.Entity("strAppersBackend.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category = "Leadership",
                            CreatedAt = new DateTime(2025, 8, 26, 20, 24, 1, 430, DateTimeKind.Utc).AddTicks(5259),
                            Description = "Leads project planning and execution",
                            IsActive = true,
                            Name = "Project Manager"
                        },
                        new
                        {
                            Id = 2,
                            Category = "Technical",
                            CreatedAt = new DateTime(2025, 8, 26, 20, 24, 1, 430, DateTimeKind.Utc).AddTicks(5264),
                            Description = "Develops user interface and user experience",
                            IsActive = true,
                            Name = "Frontend Developer"
                        },
                        new
                        {
                            Id = 3,
                            Category = "Technical",
                            CreatedAt = new DateTime(2025, 8, 26, 20, 24, 1, 430, DateTimeKind.Utc).AddTicks(5267),
                            Description = "Develops server-side logic and database integration",
                            IsActive = true,
                            Name = "Backend Developer"
                        },
                        new
                        {
                            Id = 4,
                            Category = "Technical",
                            CreatedAt = new DateTime(2025, 8, 26, 20, 24, 1, 430, DateTimeKind.Utc).AddTicks(5270),
                            Description = "Designs user interface and user experience",
                            IsActive = true,
                            Name = "UI/UX Designer"
                        },
                        new
                        {
                            Id = 5,
                            Category = "Technical",
                            CreatedAt = new DateTime(2025, 8, 26, 20, 24, 1, 430, DateTimeKind.Utc).AddTicks(5272),
                            Description = "Tests software and ensures quality standards",
                            IsActive = true,
                            Name = "Quality Assurance"
                        },
                        new
                        {
                            Id = 6,
                            Category = "Leadership",
                            CreatedAt = new DateTime(2025, 8, 26, 20, 24, 1, 430, DateTimeKind.Utc).AddTicks(5274),
                            Description = "Provides guidance and mentorship to team members",
                            IsActive = true,
                            Name = "Team Lead"
                        },
                        new
                        {
                            Id = 7,
                            Category = "Academic",
                            CreatedAt = new DateTime(2025, 8, 26, 20, 24, 1, 430, DateTimeKind.Utc).AddTicks(5277),
                            Description = "Conducts research and data analysis",
                            IsActive = true,
                            Name = "Research Assistant"
                        },
                        new
                        {
                            Id = 8,
                            Category = "Administrative",
                            CreatedAt = new DateTime(2025, 8, 26, 20, 24, 1, 430, DateTimeKind.Utc).AddTicks(5279),
                            Description = "Creates and maintains project documentation",
                            IsActive = true,
                            Name = "Documentation Specialist"
                        });
                });

            modelBuilder.Entity("strAppersBackend.Models.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("BoardId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("LinkedInUrl")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("MajorId")
                        .HasColumnType("integer");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("integer");

                    b.Property<string>("StudentId")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("YearId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BoardId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("MajorId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("StudentId")
                        .IsUnique();

                    b.HasIndex("YearId");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 8, 21, 20, 24, 1, 429, DateTimeKind.Utc).AddTicks(8953),
                            Email = "alex.johnson@techuniversity.edu",
                            FirstName = "Alex",
                            IsAdmin = true,
                            IsAvailable = true,
                            LastName = "Johnson",
                            LinkedInUrl = "https://linkedin.com/in/alexjohnson",
                            MajorId = 1,
                            StudentId = "TU001",
                            YearId = 3
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 8, 26, 20, 24, 1, 429, DateTimeKind.Utc).AddTicks(8965),
                            Email = "sarah.williams@techuniversity.edu",
                            FirstName = "Sarah",
                            IsAdmin = false,
                            IsAvailable = true,
                            LastName = "Williams",
                            LinkedInUrl = "https://linkedin.com/in/sarahwilliams",
                            MajorId = 2,
                            StudentId = "TU002",
                            YearId = 4
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 8, 31, 20, 24, 1, 429, DateTimeKind.Utc).AddTicks(8969),
                            Email = "michael.brown@techuniversity.edu",
                            FirstName = "Michael",
                            IsAdmin = true,
                            IsAvailable = true,
                            LastName = "Brown",
                            LinkedInUrl = "https://linkedin.com/in/michaelbrown",
                            MajorId = 3,
                            StudentId = "TU003",
                            YearId = 5
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 9, 5, 20, 24, 1, 429, DateTimeKind.Utc).AddTicks(8972),
                            Email = "emily.davis@techuniversity.edu",
                            FirstName = "Emily",
                            IsAdmin = false,
                            IsAvailable = true,
                            LastName = "Davis",
                            LinkedInUrl = "https://linkedin.com/in/emilydavis",
                            MajorId = 4,
                            StudentId = "TU004",
                            YearId = 2
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2025, 9, 10, 20, 24, 1, 429, DateTimeKind.Utc).AddTicks(8975),
                            Email = "david.miller@techuniversity.edu",
                            FirstName = "David",
                            IsAdmin = false,
                            IsAvailable = true,
                            LastName = "Miller",
                            LinkedInUrl = "https://linkedin.com/in/davidmiller",
                            MajorId = 1,
                            StudentId = "TU005",
                            YearId = 1
                        });
                });

            modelBuilder.Entity("strAppersBackend.Models.StudentRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AssignedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Notes")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<int>("StudentId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentRoles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AssignedDate = new DateTime(2025, 9, 5, 20, 24, 1, 430, DateTimeKind.Utc).AddTicks(9811),
                            IsActive = true,
                            Notes = "Leading the Student Management System project",
                            RoleId = 1,
                            StudentId = 1
                        },
                        new
                        {
                            Id = 2,
                            AssignedDate = new DateTime(2025, 9, 10, 20, 24, 1, 430, DateTimeKind.Utc).AddTicks(9821),
                            IsActive = true,
                            Notes = "Frontend development for multiple projects",
                            RoleId = 2,
                            StudentId = 2
                        },
                        new
                        {
                            Id = 3,
                            AssignedDate = new DateTime(2025, 9, 15, 20, 24, 1, 430, DateTimeKind.Utc).AddTicks(9824),
                            IsActive = true,
                            Notes = "Backend development and database design",
                            RoleId = 3,
                            StudentId = 3
                        },
                        new
                        {
                            Id = 4,
                            AssignedDate = new DateTime(2025, 9, 20, 20, 24, 1, 430, DateTimeKind.Utc).AddTicks(9876),
                            IsActive = true,
                            Notes = "UI/UX design for community outreach app",
                            RoleId = 4,
                            StudentId = 4
                        },
                        new
                        {
                            Id = 5,
                            AssignedDate = new DateTime(2025, 9, 25, 20, 24, 1, 430, DateTimeKind.Utc).AddTicks(9879),
                            IsActive = true,
                            Notes = "QA testing for online learning platform",
                            RoleId = 5,
                            StudentId = 5
                        },
                        new
                        {
                            Id = 6,
                            AssignedDate = new DateTime(2025, 8, 31, 20, 24, 1, 430, DateTimeKind.Utc).AddTicks(9881),
                            IsActive = true,
                            Notes = "Team lead for junior developers",
                            RoleId = 6,
                            StudentId = 1
                        },
                        new
                        {
                            Id = 7,
                            AssignedDate = new DateTime(2025, 9, 17, 20, 24, 1, 430, DateTimeKind.Utc).AddTicks(9883),
                            IsActive = true,
                            Notes = "Research on AI and machine learning",
                            RoleId = 7,
                            StudentId = 3
                        },
                        new
                        {
                            Id = 8,
                            AssignedDate = new DateTime(2025, 9, 23, 20, 24, 1, 430, DateTimeKind.Utc).AddTicks(9886),
                            IsActive = true,
                            Notes = "Documentation for frontend components",
                            RoleId = 8,
                            StudentId = 2
                        });
                });

            modelBuilder.Entity("strAppersBackend.Models.Year", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Years");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 8, 6, 20, 24, 1, 424, DateTimeKind.Utc).AddTicks(7233),
                            Description = "First year of study",
                            IsActive = true,
                            Name = "Freshman",
                            SortOrder = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 8, 6, 20, 24, 1, 424, DateTimeKind.Utc).AddTicks(7239),
                            Description = "Second year of study",
                            IsActive = true,
                            Name = "Sophomore",
                            SortOrder = 2
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 8, 6, 20, 24, 1, 424, DateTimeKind.Utc).AddTicks(7241),
                            Description = "Third year of study",
                            IsActive = true,
                            Name = "Junior",
                            SortOrder = 3
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 8, 6, 20, 24, 1, 424, DateTimeKind.Utc).AddTicks(7244),
                            Description = "Fourth year of study",
                            IsActive = true,
                            Name = "Senior",
                            SortOrder = 4
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2025, 8, 6, 20, 24, 1, 424, DateTimeKind.Utc).AddTicks(7246),
                            Description = "Graduate level study",
                            IsActive = true,
                            Name = "Graduate",
                            SortOrder = 5
                        });
                });

            modelBuilder.Entity("strAppersBackend.Models.DesignVersion", b =>
                {
                    b.HasOne("strAppersBackend.Models.Project", "Project")
                        .WithMany("DesignVersions")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("strAppersBackend.Models.JoinRequest", b =>
                {
                    b.HasOne("strAppersBackend.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("strAppersBackend.Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("strAppersBackend.Models.Project", b =>
                {
                    b.HasOne("strAppersBackend.Models.Organization", "Organization")
                        .WithMany("Projects")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("strAppersBackend.Models.ProjectBoard", b =>
                {
                    b.HasOne("strAppersBackend.Models.Student", "Admin")
                        .WithMany()
                        .HasForeignKey("AdminId");

                    b.HasOne("strAppersBackend.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("strAppersBackend.Models.ProjectStatus", "Status")
                        .WithMany("ProjectBoards")
                        .HasForeignKey("StatusId");

                    b.Navigation("Admin");

                    b.Navigation("Project");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("strAppersBackend.Models.Student", b =>
                {
                    b.HasOne("strAppersBackend.Models.ProjectBoard", "ProjectBoard")
                        .WithMany()
                        .HasForeignKey("BoardId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("strAppersBackend.Models.Major", "Major")
                        .WithMany("Students")
                        .HasForeignKey("MajorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("strAppersBackend.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("strAppersBackend.Models.Year", "Year")
                        .WithMany("Students")
                        .HasForeignKey("YearId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Major");

                    b.Navigation("Project");

                    b.Navigation("ProjectBoard");

                    b.Navigation("Year");
                });

            modelBuilder.Entity("strAppersBackend.Models.StudentRole", b =>
                {
                    b.HasOne("strAppersBackend.Models.Role", "Role")
                        .WithMany("StudentRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("strAppersBackend.Models.Student", "Student")
                        .WithMany("StudentRoles")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("strAppersBackend.Models.Major", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("strAppersBackend.Models.Organization", b =>
                {
                    b.Navigation("Projects");
                });

            modelBuilder.Entity("strAppersBackend.Models.Project", b =>
                {
                    b.Navigation("DesignVersions");
                });

            modelBuilder.Entity("strAppersBackend.Models.ProjectStatus", b =>
                {
                    b.Navigation("ProjectBoards");
                });

            modelBuilder.Entity("strAppersBackend.Models.Role", b =>
                {
                    b.Navigation("StudentRoles");
                });

            modelBuilder.Entity("strAppersBackend.Models.Student", b =>
                {
                    b.Navigation("StudentRoles");
                });

            modelBuilder.Entity("strAppersBackend.Models.Year", b =>
                {
                    b.Navigation("Students");
                });
#pragma warning restore 612, 618
        }
    }
}
