// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using strAppersBackend.Data;

#nullable disable

namespace strAppersBackend.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250913173141_AddLinkedInUrlToStudents")]
    partial class AddLinkedInUrlToStudents
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("strAppersBackend.Models.Organization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("ContactEmail")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Website")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Organizations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "123 Tech Street, Tech City",
                            ContactEmail = "info@techuniversity.edu",
                            CreatedAt = new DateTime(2025, 7, 15, 17, 31, 41, 118, DateTimeKind.Utc).AddTicks(8645),
                            Description = "Leading technology university",
                            IsActive = true,
                            Name = "Tech University",
                            Phone = "555-0101",
                            Type = "University",
                            Website = "https://techuniversity.edu"
                        },
                        new
                        {
                            Id = 2,
                            Address = "456 Innovation Ave, Tech City",
                            ContactEmail = "contact@innovationlabs.com",
                            CreatedAt = new DateTime(2025, 7, 20, 17, 31, 41, 118, DateTimeKind.Utc).AddTicks(8652),
                            Description = "Research and development company",
                            IsActive = true,
                            Name = "Innovation Labs",
                            Phone = "555-0102",
                            Type = "Company",
                            Website = "https://innovationlabs.com"
                        },
                        new
                        {
                            Id = 3,
                            Address = "789 Good Street, Tech City",
                            ContactEmail = "hello@codeforgood.org",
                            CreatedAt = new DateTime(2025, 7, 25, 17, 31, 41, 118, DateTimeKind.Utc).AddTicks(8656),
                            Description = "Non-profit organization promoting tech for social good",
                            IsActive = true,
                            Name = "Code for Good",
                            Phone = "555-0103",
                            Type = "Non-profit",
                            Website = "https://codeforgood.org"
                        });
                });

            modelBuilder.Entity("strAppersBackend.Models.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("HasAdmin")
                        .HasColumnType("boolean");

                    b.Property<int?>("OrganizationId")
                        .HasColumnType("integer");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("StatusId");

                    b.ToTable("Projects");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 8, 14, 17, 31, 41, 120, DateTimeKind.Utc).AddTicks(423),
                            Description = "Web application for managing student records and academic progress",
                            DueDate = new DateTime(2025, 10, 13, 17, 31, 41, 120, DateTimeKind.Utc).AddTicks(415),
                            HasAdmin = true,
                            OrganizationId = 1,
                            Priority = "High",
                            StartDate = new DateTime(2025, 8, 14, 17, 31, 41, 120, DateTimeKind.Utc).AddTicks(408),
                            StatusId = 3,
                            Title = "Student Management System"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 8, 24, 17, 31, 41, 120, DateTimeKind.Utc).AddTicks(433),
                            Description = "Machine learning platform for academic research",
                            DueDate = new DateTime(2025, 11, 12, 17, 31, 41, 120, DateTimeKind.Utc).AddTicks(432),
                            HasAdmin = false,
                            OrganizationId = 2,
                            Priority = "Medium",
                            StartDate = new DateTime(2025, 8, 24, 17, 31, 41, 120, DateTimeKind.Utc).AddTicks(431),
                            StatusId = 2,
                            Title = "AI Research Platform"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 6, 15, 17, 31, 41, 120, DateTimeKind.Utc).AddTicks(439),
                            Description = "Mobile app connecting volunteers with local community needs",
                            EndDate = new DateTime(2025, 9, 3, 17, 31, 41, 120, DateTimeKind.Utc).AddTicks(437),
                            HasAdmin = true,
                            OrganizationId = 3,
                            Priority = "High",
                            StartDate = new DateTime(2025, 6, 15, 17, 31, 41, 120, DateTimeKind.Utc).AddTicks(436),
                            StatusId = 5,
                            Title = "Community Outreach App"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 8, 29, 17, 31, 41, 120, DateTimeKind.Utc).AddTicks(444),
                            Description = "E-learning platform with video streaming and assessments",
                            DueDate = new DateTime(2025, 10, 28, 17, 31, 41, 120, DateTimeKind.Utc).AddTicks(442),
                            HasAdmin = false,
                            OrganizationId = 1,
                            Priority = "Critical",
                            StartDate = new DateTime(2025, 8, 29, 17, 31, 41, 120, DateTimeKind.Utc).AddTicks(442),
                            StatusId = 3,
                            Title = "Online Learning Platform"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2025, 9, 3, 17, 31, 41, 120, DateTimeKind.Utc).AddTicks(447),
                            Description = "Real-time dashboard for analyzing student performance metrics",
                            HasAdmin = false,
                            OrganizationId = 1,
                            Priority = "Medium",
                            StartDate = new DateTime(2025, 9, 3, 17, 31, 41, 120, DateTimeKind.Utc).AddTicks(446),
                            StatusId = 4,
                            Title = "Data Analytics Dashboard"
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2025, 9, 8, 17, 31, 41, 120, DateTimeKind.Utc).AddTicks(452),
                            Description = "Mobile application for students to discover and register for campus events",
                            DueDate = new DateTime(2025, 11, 12, 17, 31, 41, 120, DateTimeKind.Utc).AddTicks(451),
                            HasAdmin = false,
                            OrganizationId = 1,
                            Priority = "Medium",
                            StartDate = new DateTime(2025, 9, 8, 17, 31, 41, 120, DateTimeKind.Utc).AddTicks(450),
                            StatusId = 1,
                            Title = "Mobile App for Campus Events"
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2025, 9, 10, 17, 31, 41, 120, DateTimeKind.Utc).AddTicks(457),
                            Description = "VR environment for immersive learning experiences",
                            DueDate = new DateTime(2025, 12, 12, 17, 31, 41, 120, DateTimeKind.Utc).AddTicks(455),
                            HasAdmin = false,
                            OrganizationId = 2,
                            Priority = "High",
                            StartDate = new DateTime(2025, 9, 10, 17, 31, 41, 120, DateTimeKind.Utc).AddTicks(454),
                            StatusId = 1,
                            Title = "Virtual Reality Learning Lab"
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2025, 9, 12, 17, 31, 41, 120, DateTimeKind.Utc).AddTicks(461),
                            Description = "Secure voting system using blockchain technology",
                            DueDate = new DateTime(2025, 11, 27, 17, 31, 41, 120, DateTimeKind.Utc).AddTicks(460),
                            HasAdmin = false,
                            OrganizationId = 1,
                            Priority = "High",
                            StartDate = new DateTime(2025, 9, 12, 17, 31, 41, 120, DateTimeKind.Utc).AddTicks(459),
                            StatusId = 1,
                            Title = "Blockchain Voting System"
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2025, 9, 11, 17, 31, 41, 120, DateTimeKind.Utc).AddTicks(466),
                            Description = "Internet of Things system for campus management",
                            DueDate = new DateTime(2026, 1, 11, 17, 31, 41, 120, DateTimeKind.Utc).AddTicks(464),
                            HasAdmin = false,
                            OrganizationId = 2,
                            Priority = "Medium",
                            StartDate = new DateTime(2025, 9, 11, 17, 31, 41, 120, DateTimeKind.Utc).AddTicks(463),
                            StatusId = 1,
                            Title = "IoT Smart Campus"
                        });
                });

            modelBuilder.Entity("strAppersBackend.Models.ProjectStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("ProjectStatuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Color = "#10B981",
                            CreatedAt = new DateTime(2025, 8, 4, 17, 31, 41, 118, DateTimeKind.Utc).AddTicks(9690),
                            Description = "Newly created project",
                            IsActive = true,
                            Name = "New",
                            SortOrder = 1
                        },
                        new
                        {
                            Id = 2,
                            Color = "#3B82F6",
                            CreatedAt = new DateTime(2025, 8, 4, 17, 31, 41, 118, DateTimeKind.Utc).AddTicks(9696),
                            Description = "Project in planning phase",
                            IsActive = true,
                            Name = "Planning",
                            SortOrder = 2
                        },
                        new
                        {
                            Id = 3,
                            Color = "#F59E0B",
                            CreatedAt = new DateTime(2025, 8, 4, 17, 31, 41, 118, DateTimeKind.Utc).AddTicks(9699),
                            Description = "Project currently being worked on",
                            IsActive = true,
                            Name = "In Progress",
                            SortOrder = 3
                        },
                        new
                        {
                            Id = 4,
                            Color = "#EF4444",
                            CreatedAt = new DateTime(2025, 8, 4, 17, 31, 41, 118, DateTimeKind.Utc).AddTicks(9701),
                            Description = "Project temporarily paused",
                            IsActive = true,
                            Name = "On Hold",
                            SortOrder = 4
                        },
                        new
                        {
                            Id = 5,
                            Color = "#059669",
                            CreatedAt = new DateTime(2025, 8, 4, 17, 31, 41, 118, DateTimeKind.Utc).AddTicks(9704),
                            Description = "Project successfully completed",
                            IsActive = true,
                            Name = "Completed",
                            SortOrder = 5
                        },
                        new
                        {
                            Id = 6,
                            Color = "#6B7280",
                            CreatedAt = new DateTime(2025, 8, 4, 17, 31, 41, 118, DateTimeKind.Utc).AddTicks(9706),
                            Description = "Project cancelled or abandoned",
                            IsActive = true,
                            Name = "Cancelled",
                            SortOrder = 6
                        });
                });

            modelBuilder.Entity("strAppersBackend.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category = "Leadership",
                            CreatedAt = new DateTime(2025, 8, 4, 17, 31, 41, 120, DateTimeKind.Utc).AddTicks(1609),
                            Description = "Leads project planning and execution",
                            IsActive = true,
                            Name = "Project Manager"
                        },
                        new
                        {
                            Id = 2,
                            Category = "Technical",
                            CreatedAt = new DateTime(2025, 8, 4, 17, 31, 41, 120, DateTimeKind.Utc).AddTicks(1615),
                            Description = "Develops user interface and user experience",
                            IsActive = true,
                            Name = "Frontend Developer"
                        },
                        new
                        {
                            Id = 3,
                            Category = "Technical",
                            CreatedAt = new DateTime(2025, 8, 4, 17, 31, 41, 120, DateTimeKind.Utc).AddTicks(1617),
                            Description = "Develops server-side logic and database integration",
                            IsActive = true,
                            Name = "Backend Developer"
                        },
                        new
                        {
                            Id = 4,
                            Category = "Technical",
                            CreatedAt = new DateTime(2025, 8, 4, 17, 31, 41, 120, DateTimeKind.Utc).AddTicks(1620),
                            Description = "Designs user interface and user experience",
                            IsActive = true,
                            Name = "UI/UX Designer"
                        },
                        new
                        {
                            Id = 5,
                            Category = "Technical",
                            CreatedAt = new DateTime(2025, 8, 4, 17, 31, 41, 120, DateTimeKind.Utc).AddTicks(1622),
                            Description = "Tests software and ensures quality standards",
                            IsActive = true,
                            Name = "Quality Assurance"
                        },
                        new
                        {
                            Id = 6,
                            Category = "Leadership",
                            CreatedAt = new DateTime(2025, 8, 4, 17, 31, 41, 120, DateTimeKind.Utc).AddTicks(1624),
                            Description = "Provides guidance and mentorship to team members",
                            IsActive = true,
                            Name = "Team Lead"
                        },
                        new
                        {
                            Id = 7,
                            Category = "Academic",
                            CreatedAt = new DateTime(2025, 8, 4, 17, 31, 41, 120, DateTimeKind.Utc).AddTicks(1627),
                            Description = "Conducts research and data analysis",
                            IsActive = true,
                            Name = "Research Assistant"
                        },
                        new
                        {
                            Id = 8,
                            Category = "Administrative",
                            CreatedAt = new DateTime(2025, 8, 4, 17, 31, 41, 120, DateTimeKind.Utc).AddTicks(1629),
                            Description = "Creates and maintains project documentation",
                            IsActive = true,
                            Name = "Documentation Specialist"
                        });
                });

            modelBuilder.Entity("strAppersBackend.Models.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("LinkedInUrl")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Major")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int?>("OrganizationId")
                        .HasColumnType("integer");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("integer");

                    b.Property<string>("StudentId")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Year")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("OrganizationId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("StudentId")
                        .IsUnique();

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 7, 30, 17, 31, 41, 119, DateTimeKind.Utc).AddTicks(6040),
                            Email = "alex.johnson@techuniversity.edu",
                            FirstName = "Alex",
                            IsAdmin = true,
                            LastName = "Johnson",
                            LinkedInUrl = "https://linkedin.com/in/alexjohnson",
                            Major = "Computer Science",
                            OrganizationId = 1,
                            ProjectId = 1,
                            StudentId = "TU001",
                            Year = "Junior"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 8, 4, 17, 31, 41, 119, DateTimeKind.Utc).AddTicks(6050),
                            Email = "sarah.williams@techuniversity.edu",
                            FirstName = "Sarah",
                            IsAdmin = false,
                            LastName = "Williams",
                            LinkedInUrl = "https://linkedin.com/in/sarahwilliams",
                            Major = "Software Engineering",
                            OrganizationId = 1,
                            ProjectId = 2,
                            StudentId = "TU002",
                            Year = "Senior"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 8, 9, 17, 31, 41, 119, DateTimeKind.Utc).AddTicks(6054),
                            Email = "michael.brown@techuniversity.edu",
                            FirstName = "Michael",
                            IsAdmin = true,
                            LastName = "Brown",
                            LinkedInUrl = "https://linkedin.com/in/michaelbrown",
                            Major = "Data Science",
                            OrganizationId = 1,
                            ProjectId = 3,
                            StudentId = "TU003",
                            Year = "Graduate"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 8, 14, 17, 31, 41, 119, DateTimeKind.Utc).AddTicks(6057),
                            Email = "emily.davis@techuniversity.edu",
                            FirstName = "Emily",
                            IsAdmin = false,
                            LastName = "Davis",
                            LinkedInUrl = "https://linkedin.com/in/emilydavis",
                            Major = "Cybersecurity",
                            OrganizationId = 1,
                            StudentId = "TU004",
                            Year = "Sophomore"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2025, 8, 19, 17, 31, 41, 119, DateTimeKind.Utc).AddTicks(6060),
                            Email = "david.miller@techuniversity.edu",
                            FirstName = "David",
                            IsAdmin = false,
                            LastName = "Miller",
                            LinkedInUrl = "https://linkedin.com/in/davidmiller",
                            Major = "Computer Science",
                            OrganizationId = 1,
                            StudentId = "TU005",
                            Year = "Freshman"
                        });
                });

            modelBuilder.Entity("strAppersBackend.Models.StudentRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AssignedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Notes")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<int>("StudentId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentRoles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AssignedDate = new DateTime(2025, 8, 14, 17, 31, 41, 120, DateTimeKind.Utc).AddTicks(5338),
                            IsActive = true,
                            Notes = "Leading the Student Management System project",
                            RoleId = 1,
                            StudentId = 1
                        },
                        new
                        {
                            Id = 2,
                            AssignedDate = new DateTime(2025, 8, 19, 17, 31, 41, 120, DateTimeKind.Utc).AddTicks(5345),
                            IsActive = true,
                            Notes = "Frontend development for multiple projects",
                            RoleId = 2,
                            StudentId = 2
                        },
                        new
                        {
                            Id = 3,
                            AssignedDate = new DateTime(2025, 8, 24, 17, 31, 41, 120, DateTimeKind.Utc).AddTicks(5347),
                            IsActive = true,
                            Notes = "Backend development and database design",
                            RoleId = 3,
                            StudentId = 3
                        },
                        new
                        {
                            Id = 4,
                            AssignedDate = new DateTime(2025, 8, 29, 17, 31, 41, 120, DateTimeKind.Utc).AddTicks(5350),
                            IsActive = true,
                            Notes = "UI/UX design for community outreach app",
                            RoleId = 4,
                            StudentId = 4
                        },
                        new
                        {
                            Id = 5,
                            AssignedDate = new DateTime(2025, 9, 3, 17, 31, 41, 120, DateTimeKind.Utc).AddTicks(5353),
                            IsActive = true,
                            Notes = "QA testing for online learning platform",
                            RoleId = 5,
                            StudentId = 5
                        },
                        new
                        {
                            Id = 6,
                            AssignedDate = new DateTime(2025, 8, 9, 17, 31, 41, 120, DateTimeKind.Utc).AddTicks(5355),
                            IsActive = true,
                            Notes = "Team lead for junior developers",
                            RoleId = 6,
                            StudentId = 1
                        },
                        new
                        {
                            Id = 7,
                            AssignedDate = new DateTime(2025, 8, 26, 17, 31, 41, 120, DateTimeKind.Utc).AddTicks(5357),
                            IsActive = true,
                            Notes = "Research on AI and machine learning",
                            RoleId = 7,
                            StudentId = 3
                        },
                        new
                        {
                            Id = 8,
                            AssignedDate = new DateTime(2025, 9, 1, 17, 31, 41, 120, DateTimeKind.Utc).AddTicks(5360),
                            IsActive = true,
                            Notes = "Documentation for frontend components",
                            RoleId = 8,
                            StudentId = 2
                        });
                });

            modelBuilder.Entity("strAppersBackend.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 8, 14, 17, 31, 41, 118, DateTimeKind.Utc).AddTicks(6067),
                            Email = "john.doe@example.com",
                            Name = "John Doe"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 8, 19, 17, 31, 41, 118, DateTimeKind.Utc).AddTicks(6082),
                            Email = "jane.smith@example.com",
                            Name = "Jane Smith"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 8, 24, 17, 31, 41, 118, DateTimeKind.Utc).AddTicks(6084),
                            Email = "bob.johnson@example.com",
                            Name = "Bob Johnson"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 8, 29, 17, 31, 41, 118, DateTimeKind.Utc).AddTicks(6086),
                            Email = "alice.brown@example.com",
                            Name = "Alice Brown"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2025, 9, 3, 17, 31, 41, 118, DateTimeKind.Utc).AddTicks(6194),
                            Email = "charlie.wilson@example.com",
                            Name = "Charlie Wilson"
                        });
                });

            modelBuilder.Entity("strAppersBackend.Models.Project", b =>
                {
                    b.HasOne("strAppersBackend.Models.Organization", "Organization")
                        .WithMany("Projects")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("strAppersBackend.Models.ProjectStatus", "Status")
                        .WithMany("Projects")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Organization");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("strAppersBackend.Models.Student", b =>
                {
                    b.HasOne("strAppersBackend.Models.Organization", "Organization")
                        .WithMany("Students")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("strAppersBackend.Models.Project", "Project")
                        .WithMany("Students")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Organization");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("strAppersBackend.Models.StudentRole", b =>
                {
                    b.HasOne("strAppersBackend.Models.Role", "Role")
                        .WithMany("StudentRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("strAppersBackend.Models.Student", "Student")
                        .WithMany("StudentRoles")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("strAppersBackend.Models.Organization", b =>
                {
                    b.Navigation("Projects");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("strAppersBackend.Models.Project", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("strAppersBackend.Models.ProjectStatus", b =>
                {
                    b.Navigation("Projects");
                });

            modelBuilder.Entity("strAppersBackend.Models.Role", b =>
                {
                    b.Navigation("StudentRoles");
                });

            modelBuilder.Entity("strAppersBackend.Models.Student", b =>
                {
                    b.Navigation("StudentRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
